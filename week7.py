# -*- coding: utf-8 -*-
"""week7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XopZ6egcCrJK7oyhgzUoqddnsvPK2mcs
"""

import pandas as pd
df = pd.read_excel("Train_dataset.xlsx")

df

#df.groupby('Occupation').Infect_Prob.mean()

obj_df = df.select_dtypes(include=['object']).copy()
obj_df.head()

obj_df[obj_df.isnull().any(axis=1)]
obj_df.dtypes

obj_df["Region"].value_counts()

obj_df["Gender"].value_counts()

obj_df["Married"].value_counts()

obj_df["Occupation"].value_counts()

obj_df["Mode_transport"].value_counts()

obj_df["comorbidity"].value_counts()

obj_df["Pulmonary score"].value_counts()

obj_df["cardiological pressure"].value_counts()



cleanup_nums = {"Occupation":{"Farmer": 1,"Legal":2,"Manufacturing": 3,"Cleaner": 4,"Business": 5,"Clerk": 6,"Driver": 7,"Researcher": 8,"Sales":9 },"Married":  {"YES": 1, "NO": 0},"Gender": {"Female": 0, "Male": 1},"cardiological pressure": {"Normal": 0,"Stage-01": 1,"Stage-02": 2,"Elevated": 3},"Region": {"Bhubaneshwar": 1,"Chennai": 4,"Bengaluru": 3,"Chandigarh": 2,"Delhi": 0},"Pulmonary score":{"<400":4,"<300":3,"<200":2,"<100":1 },"Mode_transport": {"Public": 3,"Walk": 2,"Car": 1},"comorbidity":{"None": 0,"Hypertension":1,"Diabetes": 2,"Coronary Heart Disease": 3}}
#Occupation":{"Farmer": 1,"Legal":2,"Manufacturing": 3,"Cleaner": 4,"Business": 5,"Clerk": 6,"Driver": 7,"Researcher": 8,"Sales":9 },"Married":  {"YES": 1, "NO": 0},"Gender": {"Female": 0, "Male": 1},"cardiological pressure": {"Normal": 0,"Stage-01": 1,"Stage-02": 2,"Elevated": 3}"Region": {"Bhubaneshwar": 1,"Chennai": 4,"Bengaluru": 3,"Chandigarh": 2,"Delhi": 0},"Pulmonary score":{"<400":4,"<300":3,"<200":2,"<100":1 }"Mode_transport": {"Public": 3,"Walk": 2,"Car": 1},"comorbidity":{"None": 0,"Hypertension":1,"Diabetes": 2,"Coronary Heart Disease": 3

obj_df.replace(cleanup_nums,inplace=True)
obj_df.head()

from sklearn import preprocessing
import random 

df_input = obj_df[["Region","Gender","Married","Occupation","Mode_transport","comorbidity","Pulmonary score","cardiological pressure"]]
df_input["Children"] = df["Children"]
df_input["cases/1M"] = df["cases/1M"]          
df_input["Deaths/1M"] = df["Deaths/1M"]                 
df_input["Age"] = df["Age"]                        
df_input["Coma score"] = df["Coma score"]                 
df_input["Diuresis"] = df["Diuresis"]                
df_input["Platelets"] = df["Platelets"]              
df_input["HBB"] = df["HBB"]                       
df_input["d-dimer"] = df["d-dimer"]                   
df_input["Heart rate"] = df["Heart rate"]               
df_input["HDL cholesterol"] = df["HDL cholesterol"]           
df_input["Charlson Index"] = df["Charlson Index"]             
df_input["Blood Glucose"] = df["Blood Glucose"]             
df_input["Insurance"] = df["Insurance"]                 
df_input["salary"] = df["salary"]                      
df_input["FT/month"] = df["FT/month"]                 
df_input["Infect_Prob"] = df["Infect_Prob"] 
no_insurance = 0
no_Occupation = 10
no_Mode = 2
df_input["FT/month"].fillna(df_input["FT/month"].mean(),inplace = True)
df_input["Insurance"].fillna(no_insurance,inplace = True)
df_input["Children"].fillna(df_input["Children"].mean(),inplace = True)
df_input["Occupation"].fillna(no_Occupation,inplace = True)
df_input["Mode_transport"].fillna(no_Mode,inplace = True)

x = df[['d-dimer']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x)
df_input["d-dimer"] = pd.DataFrame(x_scaled)
df_input["d-dimer"].fillna(df_input["d-dimer"].mean(),inplace = True)
y = df[['HBB']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
y_scaled = min_max_scaler.fit_transform(y)
df_input["HBB"] = pd.DataFrame(y_scaled)
df_input["HBB"].fillna(10*df_input["HBB"].mean(),inplace = True)

z = df[['Diuresis']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
z_scaled = min_max_scaler.fit_transform(z)
df_input["Diuresis"] = pd.DataFrame(z_scaled)
df_input["Diuresis"].fillna(df_input["Diuresis"].mean(),inplace = True)

a = df[['Platelets']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
a_scaled = min_max_scaler.fit_transform(a)
df_input["Platelets"] = pd.DataFrame(a_scaled)
df_input["Platelets"].fillna(df_input["Platelets"].mean(),inplace = True)


a = df[['Platelets']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
a_scaled = min_max_scaler.fit_transform(a)
df_input["Platelets"] = pd.DataFrame(a_scaled)
df_input["Platelets"].fillna(df_input["Platelets"].mean(),inplace = True)


b = df[['HDL cholesterol']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
b_scaled = min_max_scaler.fit_transform(b)
df_input["HDL cholesterol"] = pd.DataFrame(b_scaled)
df_input["HDL cholesterol"].fillna(df_input["HDL cholesterol"].mean(),inplace = True)

c = df[['salary']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
c_scaled = min_max_scaler.fit_transform(c)
df_input["salary"] = pd.DataFrame(c_scaled)
df_input["salary"].fillna(df_input["salary"].mean(),inplace = True)

e = df[['Age']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
e_scaled = min_max_scaler.fit_transform(e)
df_input["Age"] = pd.DataFrame(e_scaled)
df_input["Age"].fillna(df_input["Age"].mean(),inplace = True)

f = df[['Heart rate']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
f_scaled = min_max_scaler.fit_transform(f)
df_input["Heart rate"] = pd.DataFrame(f_scaled)
df_input["Heart rate"].fillna(df_input["Heart rate"].mean(),inplace = True)

g = df[['Charlson Index']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
g_scaled = min_max_scaler.fit_transform(g)
df_input["Charlson Index"] = pd.DataFrame(g_scaled)
df_input["Charlson Index"].fillna(df_input["Charlson Index"].mean(),inplace = True)

h = df[['Blood Glucose']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
h_scaled = min_max_scaler.fit_transform(h)
df_input["Blood Glucose"] = pd.DataFrame(h_scaled)
df_input["Blood Glucose"].fillna(df_input["Blood Glucose"].mean(),inplace = True)


d = df[['Insurance']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
d_scaled = min_max_scaler.fit_transform(d)
df_input["Insurance"] = pd.DataFrame(d_scaled)
df_input["Insurance"].fillna(df_input["Platelets"].mean(),inplace = True)

df_input["Heart rate"].fillna(df_input["Heart rate"].mean(),inplace = True)
df_input["comorbidity"].fillna(random.randrange(0,5,1),inplace = True)
df_input["cardiological pressure"].fillna(random.randrange(0,4,1),inplace = True)
df_input["HDL cholesterol"].fillna(df_input["HDL cholesterol"].mean(),inplace = True)

df_train1 = df_input.iloc[:,0:24]
df_train2 = df_input.iloc[:,-1]
df_input

df_input["comorbidity"].value_counts()
df_input.groupby("Occupation").comorbidity.value_counts()
df_input[df_input["comorbidity"].isna()]
df_input[df_input.isna().any(axis=1)]

import tensorflow as tf 
from tensorflow import keras
from keras.layers import Dense, Activation
from keras.models import Sequential
from tensorflow import nn 
from keras.layers import LeakyReLU

model = Sequential()


model.add(Dense(32, input_shape=(24,))) 
model.add(LeakyReLU(alpha=0.005))
model.add(Dense(16))
model.add(Dense(8))
model.add(Dense(4))
model.add(Dense(1))




model.compile(optimizer='rmsprop',loss='mse')
model.fit(df_train1, df_train2, epochs=50, batch_size=32)

df_test = pd.read_excel("Test_dataset.xlsx")

cleanup_nums = {"Occupation":{"Farmer": 1,"Legal":2,"Manufacturing": 3,"Cleaner": 4,"Business": 5,"Clerk": 6,"Driver": 7,"Researcher": 8,"Sales":9 },"Married":  {"YES": 1, "NO": 0},"Gender": {"Female": 0, "Male": 1},"cardiological pressure": {"Normal": 0,"Stage-01": 1,"Stage-02": 2,"Elevated": 3},"Region": {"Bhubaneshwar": 1,"Chennai": 4,"Bengaluru": 3,"Chandigarh": 2,"Delhi": 0,"Thiruvananthapuram" :5,"Hyderabad":6,"Kolkata":7,"Mumbai":8,"Pune":9},"Pulmonary score":{"<400":4,"<300":3,"<200":2,"<100":1 },"Mode_transport": {"Public": 3,"Walk": 2,"Car": 1},"comorbidity":{"None": 0,"Hypertension":1,"Diabetes": 2,"Coronary Heart Disease": 3}}
#Occupation":{"Farmer": 1,"Legal":2,"Manufacturing": 3,"Cleaner": 4,"Business": 5,"Clerk": 6,"Driver": 7,"Researcher": 8,"Sales":9 },"Married":  {"YES": 1, "NO": 0},"Gender": {"Female": 0, "Male": 1},"cardiological pressure": {"Normal": 0,"Stage-01": 1,"Stage-02": 2,"Elevated": 3}"Region": {"Bhubaneshwar": 1,"Chennai": 4,"Bengaluru": 3,"Chandigarh": 2,"Delhi": 0},"Pulmonary score":{"<400":4,"<300":3,"<200":2,"<100":1 }"Mode_transport": {"Public": 3,"Walk": 2,"Car": 1},"comorbidity":{"None": 0,"Hypertension":1,"Diabetes": 2,"Coronary Heart Disease": 3

df_test.replace(cleanup_nums,inplace=True)
df_test.head()

x = df_test[['d-dimer']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x)
df_test["d-dimer"] = pd.DataFrame(x_scaled)
df_test["d-dimer"].fillna(df_test["d-dimer"].mean(),inplace = True)

y = df_test[['HBB']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
y_scaled = min_max_scaler.fit_transform(y)
df_test["HBB"] = pd.DataFrame(y_scaled)
df_test["HBB"].fillna(df_test["HBB"].mean(),inplace = True)

z = df_test[['Diuresis']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
z_scaled = min_max_scaler.fit_transform(z)
df_test["Diuresis"] = pd.DataFrame(z_scaled)
df_test["Diuresis"].fillna(df_test["Diuresis"].mean(),inplace = True)

a = df_test[['Platelets']].values.astype(float)
min_max_scaler = preprocessing.MinMaxScaler()
a_scaled = min_max_scaler.fit_transform(a)
df_test["Platelets"] = pd.DataFrame(a_scaled)
df_test["Platelets"].fillna(df_test["Platelets"].mean(),inplace = True)
  
df_test1 = df_test[["Region","Gender","Married","Occupation","Mode_transport","comorbidity","Pulmonary score","cardiological pressure","Children","cases/1M","Deaths/1M","Age","Coma score","Diuresis","Platelets","HBB","d-dimer","Heart rate","HDL cholesterol","Charlson Index","Blood Glucose","Insurance","salary","FT/month"]]
df_test1                   

x_test = df_test1
y_test = df_test.iloc[:,-1]

import numpy
model.evaluate(x_test, y_test, batch_size=32)
pred_vals = model.predict(x_test)
print(100*new)
p_scaled = min_max_scaler.fit_transform(pred_vals)
new = pd.DataFrame(p_scaled)
numpy.savetxt("foo.csv", 100*new, delimiter=",")



Diu_train = pd.read_excel("Train_dataset.xlsx", sheet_name="Diuresis_TS")

Diu_train.columns

Mar_20 = Diu_train
Mar_20 = Mar_20.set_index('people_ID')
Mar_t = Mar_20.transpose()
Mar_t.columns
Mar_t



simple_lstm_model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(4),
    tf.keras.layers.Dense(1)
])

simple_lstm_model.compile(optimizer='adam', loss='mae')

import numpy as np

final = []
for i in range(10713):
  x_train = np.array(Mar_t[i+1])
  simple_lstm_model.fit(x_train,epochs = 10,steps_per_epoch= 3)
